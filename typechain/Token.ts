/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenInterface extends utils.Interface {
  functions: {
    "_FaaSFee()": FunctionFragment;
    "_burnFee()": FunctionFragment;
    "_charityFee()": FunctionFragment;
    "_creationTime()": FunctionFragment;
    "_devFundFee()": FunctionFragment;
    "_distributionFee()": FunctionFragment;
    "_donationLotteryPrizeFee()": FunctionFragment;
    "_isExcluded(address)": FunctionFragment;
    "_liquidityFee()": FunctionFragment;
    "_lotteryHolderFee()": FunctionFragment;
    "_marketingFundFee()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveAndCall(address,uint256,bytes)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnAddress()": FunctionFragment;
    "charityWalletAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deliver(uint256)": FunctionFragment;
    "devFundWalletAddress()": FunctionFragment;
    "disableTicketsTs()": FunctionFragment;
    "donationAddress()": FunctionFragment;
    "donationLotteryDebug()": FunctionFragment;
    "donationLotteryEnabled()": FunctionFragment;
    "donationLotteryIndex()": FunctionFragment;
    "donationLotteryLimit()": FunctionFragment;
    "donationLotteryMinLimit()": FunctionFragment;
    "donationLotteryPrizeWalletAddress()": FunctionFragment;
    "donationLotteryWinner()": FunctionFragment;
    "endtime()": FunctionFragment;
    "excludeFromFee(address)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "faaSWalletAddress()": FunctionFragment;
    "getPrizeForEach1k()": FunctionFragment;
    "getPrizeForHolders()": FunctionFragment;
    "getTicketsByBalance()": FunctionFragment;
    "getTime()": FunctionFragment;
    "holderAddress()": FunctionFragment;
    "includeInFee(address)": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "lotteryHolderMinBalance()": FunctionFragment;
    "lotteryHoldersDebug()": FunctionFragment;
    "lotteryHoldersEnabled()": FunctionFragment;
    "lotteryHoldersIndex()": FunctionFragment;
    "lotteryHoldersLimit()": FunctionFragment;
    "lotteryHoldersWinner()": FunctionFragment;
    "lotteryTotalTicket()": FunctionFragment;
    "lotteryUserTickets(address)": FunctionFragment;
    "marketingFundWalletAddress()": FunctionFragment;
    "minimumDonationForTicket()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBurnAddress(address)": FunctionFragment;
    "setBurnFeePercent(uint256)": FunctionFragment;
    "setCharityFeePercent(uint256)": FunctionFragment;
    "setCharityWalletAddress(address)": FunctionFragment;
    "setDevFundFeePercent(uint256)": FunctionFragment;
    "setDevFundWalletAddress(address)": FunctionFragment;
    "setDisableTicketsTs(bool)": FunctionFragment;
    "setDistributionFeePercent(uint256)": FunctionFragment;
    "setDonationAddress(address)": FunctionFragment;
    "setDonationLotteryDebug(bool)": FunctionFragment;
    "setDonationLotteryEnabled(bool)": FunctionFragment;
    "setDonationLotteryLimit(uint256)": FunctionFragment;
    "setDonationLotteryMinLimit(uint256)": FunctionFragment;
    "setDonationLotteryPrizeFeePercent(uint256)": FunctionFragment;
    "setDonationLotteryPrizeWalletAddress(address)": FunctionFragment;
    "setFaaSWalletAddress(address)": FunctionFragment;
    "setHolderAddress(address)": FunctionFragment;
    "setLiquidityFeePercent(uint256)": FunctionFragment;
    "setLotteryHolderMinBalance(uint256)": FunctionFragment;
    "setLotteryHoldersDebug(bool)": FunctionFragment;
    "setLotteryHoldersEnabled(bool)": FunctionFragment;
    "setLotteryHoldersLimit(uint256)": FunctionFragment;
    "setMarketingFundFeePercent(uint256)": FunctionFragment;
    "setMarketingFundWalletAddress(address)": FunctionFragment;
    "setMaxTxPercent(uint256)": FunctionFragment;
    "setMinimumDonationForTicket(uint256)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAndCall(address,uint256,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateHolderList(address[])": FunctionFragment;
    "userTicketsTs(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_FaaSFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "_burnFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_charityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_devFundFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_distributionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_donationLotteryPrizeFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_isExcluded", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_lotteryHolderFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_marketingFundFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAndCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charityWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devFundWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableTicketsTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryDebug",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryMinLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryPrizeWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationLotteryWinner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endtime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "faaSWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeForEach1k",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeForHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsByBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "holderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHolderMinBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHoldersDebug",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHoldersEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHoldersIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHoldersLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryHoldersWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryTotalTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryUserTickets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFundWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDonationForTicket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCharityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCharityWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFundFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFundWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisableTicketsTs",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryDebug",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryMinLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryPrizeFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationLotteryPrizeWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFaaSWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolderAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryHolderMinBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryHoldersDebug",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryHoldersEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLotteryHoldersLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingFundFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingFundWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDonationForTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateHolderList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userTicketsTs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(functionFragment: "_FaaSFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_burnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_charityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_devFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_distributionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_donationLotteryPrizeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcluded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_lotteryHolderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_marketingFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "charityWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFundWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTicketsTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryDebug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryMinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryPrizeWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationLotteryWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endtime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faaSWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeForEach1k",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeForHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsByBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHolderMinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHoldersDebug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHoldersEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHoldersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHoldersLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryHoldersWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryTotalTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryUserTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFundWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDonationForTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCharityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCharityWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevFundFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevFundWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisableTicketsTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryDebug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryMinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryPrizeFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationLotteryPrizeWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFaaSWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryHolderMinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryHoldersDebug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryHoldersEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLotteryHoldersLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingFundFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingFundWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDonationForTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHolderList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTicketsTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LotteryHolderChooseOne(uint256,address,uint256)": EventFragment;
    "LotteryTriggerEveryNtx(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WhiteListTransfer(address,address,uint256)": EventFragment;
    "donationLotteryTicket(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryHolderChooseOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryTriggerEveryNtx"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "donationLotteryTicket"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type LotteryHolderChooseOneEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { tickets: BigNumber; winner: string; prize: BigNumber }
>;

export type LotteryHolderChooseOneEventFilter =
  TypedEventFilter<LotteryHolderChooseOneEvent>;

export type LotteryTriggerEveryNtxEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { ticket: BigNumber; winner: string; prize: BigNumber }
>;

export type LotteryTriggerEveryNtxEventFilter =
  TypedEventFilter<LotteryTriggerEveryNtxEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { half: BigNumber; newBalance: BigNumber; otherHalf: BigNumber }
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean],
  { _enabled: boolean }
>;

export type SwapAndLiquifyEnabledUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyEnabledUpdatedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WhiteListTransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>;

export type WhiteListTransferEventFilter =
  TypedEventFilter<WhiteListTransferEvent>;

export type donationLotteryTicketEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    to: string;
    value: BigNumber;
    donationLotteryIndex: BigNumber;
    donationLotteryUsers: BigNumber;
  }
>;

export type donationLotteryTicketEventFilter =
  TypedEventFilter<donationLotteryTicketEvent>;

export interface Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _FaaSFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _burnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _charityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _devFundFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _distributionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _donationLotteryPrizeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isExcluded(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _lotteryHolderFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _marketingFundFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnAddress(overrides?: CallOverrides): Promise<[string]>;

    charityWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devFundWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    disableTicketsTs(overrides?: CallOverrides): Promise<[boolean]>;

    donationAddress(overrides?: CallOverrides): Promise<[string]>;

    donationLotteryDebug(overrides?: CallOverrides): Promise<[boolean]>;

    donationLotteryEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    donationLotteryIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationLotteryLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationLotteryMinLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationLotteryPrizeWalletAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    donationLotteryWinner(overrides?: CallOverrides): Promise<[string]>;

    endtime(overrides?: CallOverrides): Promise<[BigNumber]>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    faaSWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    getPrizeForEach1k(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrizeForHolders(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTicketsByBalance(overrides?: CallOverrides): Promise<[string[]]>;

    getTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    holderAddress(overrides?: CallOverrides): Promise<[string]>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lotteryHolderMinBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryHoldersDebug(overrides?: CallOverrides): Promise<[boolean]>;

    lotteryHoldersEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lotteryHoldersIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryHoldersLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryHoldersWinner(overrides?: CallOverrides): Promise<[string]>;

    lotteryTotalTicket(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryUserTickets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    marketingFundWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    minimumDonationForTicket(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCharityFeePercent(
      charityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCharityWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevFundFeePercent(
      devFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisableTicketsTs(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionFeePercent(
      distributionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryMinLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryPrizeFeePercent(
      donationLotteryPrizeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDonationLotteryPrizeWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFaaSWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHolderAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryHolderMinBalance(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryHoldersDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryHoldersEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLotteryHoldersLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingFundFeePercent(
      marketingFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumDonationForTicket(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      account: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateHolderList(
      holdersToCheck: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userTicketsTs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  _FaaSFee(overrides?: CallOverrides): Promise<BigNumber>;

  _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

  _charityFee(overrides?: CallOverrides): Promise<BigNumber>;

  _creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  _devFundFee(overrides?: CallOverrides): Promise<BigNumber>;

  _distributionFee(overrides?: CallOverrides): Promise<BigNumber>;

  _donationLotteryPrizeFee(overrides?: CallOverrides): Promise<BigNumber>;

  _isExcluded(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  _lotteryHolderFee(overrides?: CallOverrides): Promise<BigNumber>;

  _marketingFundFee(overrides?: CallOverrides): Promise<BigNumber>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveAndCall(
    spender: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnAddress(overrides?: CallOverrides): Promise<string>;

  charityWalletAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deliver(
    tAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devFundWalletAddress(overrides?: CallOverrides): Promise<string>;

  disableTicketsTs(overrides?: CallOverrides): Promise<boolean>;

  donationAddress(overrides?: CallOverrides): Promise<string>;

  donationLotteryDebug(overrides?: CallOverrides): Promise<boolean>;

  donationLotteryEnabled(overrides?: CallOverrides): Promise<boolean>;

  donationLotteryIndex(overrides?: CallOverrides): Promise<BigNumber>;

  donationLotteryLimit(overrides?: CallOverrides): Promise<BigNumber>;

  donationLotteryMinLimit(overrides?: CallOverrides): Promise<BigNumber>;

  donationLotteryPrizeWalletAddress(overrides?: CallOverrides): Promise<string>;

  donationLotteryWinner(overrides?: CallOverrides): Promise<string>;

  endtime(overrides?: CallOverrides): Promise<BigNumber>;

  excludeFromFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  faaSWalletAddress(overrides?: CallOverrides): Promise<string>;

  getPrizeForEach1k(overrides?: CallOverrides): Promise<BigNumber>;

  getPrizeForHolders(overrides?: CallOverrides): Promise<BigNumber>;

  getTicketsByBalance(overrides?: CallOverrides): Promise<string[]>;

  getTime(overrides?: CallOverrides): Promise<BigNumber>;

  holderAddress(overrides?: CallOverrides): Promise<string>;

  includeInFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lotteryHolderMinBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryHoldersDebug(overrides?: CallOverrides): Promise<boolean>;

  lotteryHoldersEnabled(overrides?: CallOverrides): Promise<boolean>;

  lotteryHoldersIndex(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryHoldersLimit(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryHoldersWinner(overrides?: CallOverrides): Promise<string>;

  lotteryTotalTicket(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryUserTickets(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  marketingFundWalletAddress(overrides?: CallOverrides): Promise<string>;

  minimumDonationForTicket(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnFeePercent(
    burnFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCharityFeePercent(
    charityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCharityWalletAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevFundFeePercent(
    devFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevFundWalletAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisableTicketsTs(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionFeePercent(
    distributionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryDebug(
    val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryEnabled(
    val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryLimit(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryMinLimit(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryPrizeFeePercent(
    donationLotteryPrizeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDonationLotteryPrizeWalletAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFaaSWalletAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHolderAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeePercent(
    liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryHolderMinBalance(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryHoldersDebug(
    val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryHoldersEnabled(
    val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLotteryHoldersLimit(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingFundFeePercent(
    marketingFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingFundWalletAddress(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTxPercent(
    maxTxPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumDonationForTicket(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    account: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAndCall(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateHolderList(
    holdersToCheck: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userTicketsTs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    _FaaSFee(overrides?: CallOverrides): Promise<BigNumber>;

    _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    _charityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    _devFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    _distributionFee(overrides?: CallOverrides): Promise<BigNumber>;

    _donationLotteryPrizeFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isExcluded(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _lotteryHolderFee(overrides?: CallOverrides): Promise<BigNumber>;

    _marketingFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<string>;

    charityWalletAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deliver(tAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    devFundWalletAddress(overrides?: CallOverrides): Promise<string>;

    disableTicketsTs(overrides?: CallOverrides): Promise<boolean>;

    donationAddress(overrides?: CallOverrides): Promise<string>;

    donationLotteryDebug(overrides?: CallOverrides): Promise<boolean>;

    donationLotteryEnabled(overrides?: CallOverrides): Promise<boolean>;

    donationLotteryIndex(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryLimit(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryMinLimit(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryPrizeWalletAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    donationLotteryWinner(overrides?: CallOverrides): Promise<string>;

    endtime(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFee(account: string, overrides?: CallOverrides): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    faaSWalletAddress(overrides?: CallOverrides): Promise<string>;

    getPrizeForEach1k(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeForHolders(overrides?: CallOverrides): Promise<BigNumber>;

    getTicketsByBalance(overrides?: CallOverrides): Promise<string[]>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    holderAddress(overrides?: CallOverrides): Promise<string>;

    includeInFee(account: string, overrides?: CallOverrides): Promise<void>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lotteryHolderMinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersDebug(overrides?: CallOverrides): Promise<boolean>;

    lotteryHoldersEnabled(overrides?: CallOverrides): Promise<boolean>;

    lotteryHoldersIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersWinner(overrides?: CallOverrides): Promise<string>;

    lotteryTotalTicket(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryUserTickets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    marketingFundWalletAddress(overrides?: CallOverrides): Promise<string>;

    minimumDonationForTicket(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBurnAddress(val: string, overrides?: CallOverrides): Promise<void>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCharityFeePercent(
      charityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCharityWalletAddress(
      val: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevFundFeePercent(
      devFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevFundWalletAddress(
      val: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisableTicketsTs(
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionFeePercent(
      distributionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationAddress(val: string, overrides?: CallOverrides): Promise<void>;

    setDonationLotteryDebug(
      val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationLotteryEnabled(
      val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationLotteryLimit(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationLotteryMinLimit(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationLotteryPrizeFeePercent(
      donationLotteryPrizeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonationLotteryPrizeWalletAddress(
      val: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFaaSWalletAddress(val: string, overrides?: CallOverrides): Promise<void>;

    setHolderAddress(val: string, overrides?: CallOverrides): Promise<void>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryHolderMinBalance(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryHoldersDebug(
      val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryHoldersEnabled(
      val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLotteryHoldersLimit(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingFundFeePercent(
      marketingFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingFundWalletAddress(
      val: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDonationForTicket(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      account: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateHolderList(
      holdersToCheck: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    userTicketsTs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "LotteryHolderChooseOne(uint256,address,uint256)"(
      tickets?: null,
      winner?: null,
      prize?: null
    ): LotteryHolderChooseOneEventFilter;
    LotteryHolderChooseOne(
      tickets?: null,
      winner?: null,
      prize?: null
    ): LotteryHolderChooseOneEventFilter;

    "LotteryTriggerEveryNtx(uint256,address,uint256)"(
      ticket?: null,
      winner?: null,
      prize?: null
    ): LotteryTriggerEveryNtxEventFilter;
    LotteryTriggerEveryNtx(
      ticket?: null,
      winner?: null,
      prize?: null
    ): LotteryTriggerEveryNtxEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      half?: null,
      newBalance?: null,
      otherHalf?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      half?: null,
      newBalance?: null,
      otherHalf?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      _enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;
    SwapAndLiquifyEnabledUpdated(
      _enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "WhiteListTransfer(address,address,uint256)"(
      from?: null,
      to?: null,
      amount?: null
    ): WhiteListTransferEventFilter;
    WhiteListTransfer(
      from?: null,
      to?: null,
      amount?: null
    ): WhiteListTransferEventFilter;

    "donationLotteryTicket(address,address,uint256,uint256,uint256)"(
      user?: null,
      to?: null,
      value?: null,
      donationLotteryIndex?: null,
      donationLotteryUsers?: null
    ): donationLotteryTicketEventFilter;
    donationLotteryTicket(
      user?: null,
      to?: null,
      value?: null,
      donationLotteryIndex?: null,
      donationLotteryUsers?: null
    ): donationLotteryTicketEventFilter;
  };

  estimateGas: {
    _FaaSFee(overrides?: CallOverrides): Promise<BigNumber>;

    _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    _charityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    _devFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    _distributionFee(overrides?: CallOverrides): Promise<BigNumber>;

    _donationLotteryPrizeFee(overrides?: CallOverrides): Promise<BigNumber>;

    _isExcluded(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _lotteryHolderFee(overrides?: CallOverrides): Promise<BigNumber>;

    _marketingFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    charityWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devFundWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    disableTicketsTs(overrides?: CallOverrides): Promise<BigNumber>;

    donationAddress(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryDebug(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryIndex(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryLimit(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryMinLimit(overrides?: CallOverrides): Promise<BigNumber>;

    donationLotteryPrizeWalletAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationLotteryWinner(overrides?: CallOverrides): Promise<BigNumber>;

    endtime(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    faaSWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeForEach1k(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeForHolders(overrides?: CallOverrides): Promise<BigNumber>;

    getTicketsByBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    holderAddress(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryHolderMinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersDebug(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryHoldersWinner(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryTotalTicket(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryUserTickets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketingFundWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDonationForTicket(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCharityFeePercent(
      charityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCharityWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevFundFeePercent(
      devFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisableTicketsTs(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionFeePercent(
      distributionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryMinLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryPrizeFeePercent(
      donationLotteryPrizeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDonationLotteryPrizeWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFaaSWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHolderAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryHolderMinBalance(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryHoldersDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryHoldersEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLotteryHoldersLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingFundFeePercent(
      marketingFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumDonationForTicket(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      account: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateHolderList(
      holdersToCheck: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userTicketsTs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _FaaSFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _charityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _devFundFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _distributionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _donationLotteryPrizeFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isExcluded(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lotteryHolderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _marketingFundFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    charityWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devFundWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableTicketsTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationLotteryDebug(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryMinLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryPrizeWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationLotteryWinner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endtime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    faaSWalletAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrizeForEach1k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrizeForHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketsByBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holderAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHolderMinBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHoldersDebug(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHoldersEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHoldersIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHoldersLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryHoldersWinner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryTotalTicket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryUserTickets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketingFundWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDonationForTicket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCharityFeePercent(
      charityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCharityWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevFundFeePercent(
      devFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisableTicketsTs(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionFeePercent(
      distributionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryMinLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryPrizeFeePercent(
      donationLotteryPrizeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDonationLotteryPrizeWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFaaSWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHolderAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryHolderMinBalance(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryHoldersDebug(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryHoldersEnabled(
      val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLotteryHoldersLimit(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingFundFeePercent(
      marketingFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingFundWalletAddress(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumDonationForTicket(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      account: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateHolderList(
      holdersToCheck: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userTicketsTs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
